apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.ehook.dy"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file("release.jks")
            storePassword "qweasdzxc"
            keyAlias "key0"
            keyPassword "qweasdzxc"
        }
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable false
            jniDebuggable false
            zipAlignEnabled true
            minifyEnabled true
            testCoverageEnabled false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "app_${variant.buildType.name}_${defaultConfig.versionName}.apk"
        }
    }
//    sourceSets {
//        main {
//            proto {
//                srcDir 'src/main/proto'  //proto文件所在路径
//                include '**/*.proto'
//            }
//            java {
//                srcDir 'src/main/java'
//            }
//        }
//    }
}
//protobuf {
//    protoc {
//        // You still need protoc like in the non-Android case
//        artifact = 'com.google.protobuf:protoc:3.6.1'
//    }
//    generateProtoTasks {
//        all().each { task ->
//            task.builtins {
//                remove java
//            }
//            task.builtins {
//                java {}
//            }
//        }
//    }
//}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
//    implementation "com.github.bumptech.glide:glide:$glide"
//    annotationProcessor "com.github.bumptech.glide:compiler:$glide"
    compileOnly "com.squareup.okhttp3:okhttp:$okhttp"
//    implementation "com.zhy:okhttputils:$okhttputils"
    implementation project(':ehook')
    implementation project(":dy")
    implementation project(":socket")
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.bouncycastle:bcprov-jdk16:1.46'
    implementation 'commons-codec:commons-codec:1.10'
    compileOnly 'de.robv.android.xposed:api:82'
    compileOnly 'de.robv.android.xposed:api:82:sources'
    implementation "com.google.protobuf.nano:protobuf-javanano:3.2.0rc2"
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation 'com.gyf.barlibrary:barlibrary:2.3.0'
    implementation 'com.tencent.bugly:crashreport_upgrade:1.4.1'
    implementation 'com.tencent.bugly:nativecrashreport:3.7.1'

}

// 每次修改运行后自动让 VXP 中的模块`即时生效` ,需要将 (Debug Configurations) - Before Launch - Gradle aware Make - 修改为 :app:installDebug
afterEvaluate {
    installDebug.doLast {
//        updateVirtualXposedAPP.execute()
//        rebootVirtualXposedAPP.execute()
//        launchVirtualXposedAPP.execute()
//        launchVirtualXposedSampleAPP.execute()
//        restartWeworkApp.execute()
    }
}

// 更新 重启企业微信
task restartWeworkApp(type: Exec) {
    commandLine android.adbExecutable, 'shell', 'am', 'force-stop', 'com.tencent.wework'
//    commandLine android.adbExecutable, 'shell', 'am', 'start', '-n' ,'com.tencent.wework/com.tencent.wework.launch.LaunchSplashActivity'
}

// 更新 VXP 中的 app
task updateVirtualXposedAPP(type: Exec) {
    def pkg = android.defaultConfig.applicationId
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'update', '-e', 'pkg', pkg
}

// 重启 VXP
task rebootVirtualXposedAPP(type: Exec) {
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'reboot'
}

// 重启 VXP 企业微信
task launchVirtualXposedAPP(type: Exec) {
    def pkg = 'com.tencent.wework'
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'launch', '-e', 'pkg', pkg
}
// 重启 VXP Sample
task launchVirtualXposedSampleAPP(type: Exec) {
    def pkg = 'com.ehook.sample'
    commandLine android.adbExecutable, 'shell', 'am', 'broadcast', '-a', 'io.va.exposed.CMD', '-e', 'cmd', 'launch', '-e', 'pkg', pkg
}
